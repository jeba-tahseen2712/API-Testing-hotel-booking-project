{
	"info": {
		"_postman_id": "9598e332-1633-4eb8-b989-ca8350645391",
		"name": "Hotel_booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26105018"
	},
	"item": [
		{
			"name": "Create_booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"booking_id\",jsonData.bookingid)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstName\",firstName)\r",
							"\r",
							"//---------------for CSV file data excess-----------\r",
							"//----------------firstName----------------------\r",
							"\r",
							"//var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"//pm.iterationData.set(\"firstName\",firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastName\",lastName)\r",
							"\r",
							"//---------------for CSV file data excess-----------\r",
							"//----------------lastName----------------------\r",
							"\r",
							"//var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"//pm.iterationData.set(\"lastName\",lastName)\r",
							"\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomPrice}}\")\r",
							"var price = parseInt(totalPrice)\r",
							"pm.environment.set(\"totalPrice\",price)\r",
							"\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositpaid\",Boolean(depositPaid))\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"pm.environment.set(\"checkin\", today.format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkout\", today.add(4,'day').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"console.log(today.format(\"YYYY-MM-DD\"))\r",
							"\r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"pm.environment.set(\"additionalneeds\", additionalneeds)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : \"{{totalPrice}}\",\r\n\t\"depositpaid\" : \"{{depositPaid}}\",\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_Url}}/booking/",
					"host": [
						"{{base_Url}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"switch(code){\r",
							"    case 200:\r",
							"    var jsonData = pm.response.json()\r",
							"pm.test(\"First name Validation\", function () {\r",
							"pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Last name Validation\", function () {\r",
							"pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Total price Validation\", function () {\r",
							"pm.expect(jsonData.totalprice).to.eql(pm.environment.get(\"totalPrice\"))\r",
							"})\r",
							"\r",
							"pm.test(\"depositpaid Validation\", function () {\r",
							"pm.expect(jsonData.depositpaid).to.eql(pm.environment.get(\"depositpaid\"))\r",
							"})\r",
							"\r",
							"pm.test(\"checkin Validation\", function () {\r",
							"pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"checkin\"))\r",
							"})\r",
							"\r",
							"pm.test(\"checkout Validation\", function () {\r",
							"pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"checkout\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"additionalneeds Validation\", function () {\r",
							"pm.expect(jsonData.additionalneeds).to.eql(pm.environment.get(\"additionalneeds\"))\r",
							"})\r",
							"break;\r",
							"\r",
							"case 404:\r",
							"pm.test(\"something went wrong\", function(){\r",
							"\r",
							"})\r",
							"break;\r",
							"\r",
							"\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_Url}}/booking/{{booking_id}}",
					"host": [
						"{{base_Url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstName\",firstName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastName\",lastName)\r",
							"\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomPrice}}\")\r",
							"var price = parseInt(totalPrice)\r",
							"pm.environment.set(\"totalPrice\",price)\r",
							"\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositpaid\",Boolean(depositPaid))\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"pm.environment.set(\"checkin\", today.format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkout\", today.add(4,'day').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"console.log(today.format(\"YYYY-MM-DD\"))\r",
							"\r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"pm.environment.set(\"additionalneeds\", additionalneeds)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code = pm.response.code\r",
							"switch(code){\r",
							"    case 200:\r",
							"    var jsonData = pm.response.json()\r",
							"pm.test(\"First name Validation\", function () {\r",
							"pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Last name Validation\", function () {\r",
							"pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastName\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Total price Validation\", function () {\r",
							"pm.expect(jsonData.totalprice).to.eql(pm.environment.get(\"totalPrice\"))\r",
							"})\r",
							"\r",
							"pm.test(\"depositpaid Validation\", function () {\r",
							"pm.expect(jsonData.depositpaid).to.eql(pm.environment.get(\"depositpaid\"))\r",
							"})\r",
							"\r",
							"pm.test(\"checkin Validation\", function () {\r",
							"pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"checkin\"))\r",
							"})\r",
							"\r",
							"pm.test(\"checkout Validation\", function () {\r",
							"pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"checkout\"))\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"additionalneeds Validation\", function () {\r",
							"pm.expect(jsonData.additionalneeds).to.eql(pm.environment.get(\"additionalneeds\"))\r",
							"})\r",
							"break;\r",
							"\r",
							"case 404:\r",
							"pm.test(\"something went wrong\", function(){\r",
							"\r",
							"})\r",
							"break;\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token_id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : \"{{totalPrice}}\",\r\n\t\"depositpaid\" : \"{{depositPaid}}\",\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_Url}}/booking/{{booking_id}}",
					"host": [
						"{{base_Url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"token_id\",jsonData.token)\r",
							"\r",
							"pm.test(\"Token Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delate",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "cookie",
						"value": "token={{token_id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_Url}}/booking/{{booking_id}}",
					"host": [
						"{{base_Url}}"
					],
					"path": [
						"booking",
						"{{booking_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}